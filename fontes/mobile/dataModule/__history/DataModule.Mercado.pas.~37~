unit DataModule.Mercado;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  RESTRequest4D, DataSet.Serialize.Config, uConsts, FireDAC.Stan.Async,
  FireDAC.DApt, Math;

type
  TDmMercado = class(TDataModule)
    TabMercado: TFDMemTable;
    TabCategoria: TFDMemTable;
    TabProduto: TFDMemTable;
    TabProdDetalhe: TFDMemTable;
    QryMercado: TFDQuery;
    QryCarrinho: TFDQuery;
    QryCarrinhoItens: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
  private
      { Private declarations }
  public
    { Public declarations }
    procedure ListarMercado(busca, ind_entrega, ind_retira: string);
    procedure ListarMercadoId(id_mercado: integer);
    procedure ListarCategoria(id_mercado: integer);
    procedure ListarProduto(id_mercado, id_categoria : integer; busca : string);
    procedure ListarProdutoId(id_produto: integer);
    function ExistePedidoLocal(id_mercado: integer): Boolean;
    procedure LimparCarrinhoLocal;
    procedure AdicionarCarrinhoLocal(Id_mercado: Integer; Nome_mercado, Endereco_mercado: string; Taxa_entrega: Double);
    procedure AdicionarItemCarrinhoLocal(Id_produto: integer; url_foto, nome, unidade : string; qtd, valor_unitario : double);
    procedure ListarCarrinhoLocal;
    procedure ListarItemCarrinhoLocal;
  end;

var
  DmMercado: TDmMercado;

implementation

uses
  DataModule.Usuario;

{%CLASSGROUP 'FMX.Controls.TControl'}

{$R *.dfm}

//create
procedure TDmMercado.DataModuleCreate(Sender: TObject);
begin
  TDataSetSerializeConfig.GetInstance.CaseNameDefinition := cndLower;
end;

// listar mercados
procedure TDmMercado.ListarMercado(busca, ind_entrega, ind_retira: string);
var
  resp: IResponse;
begin
    //resposta
    resp := TRequest.New.BaseURL(BASE_URL)
            .Resource('mercados')
            .DataSetAdapter(TabMercado)
            .AddParam('busca', busca)
            .AddParam('ind_entrega', ind_entrega)
            .AddParam('ind_retira', ind_retira)
            .Accept('application/json')
            .BasicAuthentication(USER_NAME, PASSWORD)
            .Get;

    if (resp.StatusCode <> 200) then
        raise Exception.Create(resp.Content);
end;

//listar mercados
procedure TDmMercado.ListarMercadoId(id_mercado : integer);
var
  resp: IResponse;
begin
    //resposta
    resp := TRequest.New.BaseURL(BASE_URL)
            .Resource('mercados')
            .ResourceSuffix(id_mercado.ToString)
            .DataSetAdapter(TabMercado)
            .Accept('application/json')
            .BasicAuthentication(USER_NAME, PASSWORD)
            .Get;

    if (resp.StatusCode <> 200) then
        raise Exception.Create(resp.Content);
end;

//listar categoria por id
procedure TDmMercado.ListarCategoria(id_mercado : integer);
var
  resp: IResponse;
begin
    //resposta
    resp := TRequest.New.BaseURL(BASE_URL)
            .Resource('mercados')
            .ResourceSuffix(id_mercado.ToString + '/categorias')
            .DataSetAdapter(TabCategoria)
            .Accept('application/json')
            .BasicAuthentication(USER_NAME, PASSWORD)
            .Get;

    if (resp.StatusCode <> 200) then
        raise Exception.Create(resp.Content);
end;

//listar produtos
procedure TDmMercado.ListarProduto(id_mercado, id_categoria : integer; busca : string);
var
  resp: IResponse;
begin
    //resposta
    resp := TRequest.New.BaseURL(BASE_URL)
            .Resource('mercados')
            .ResourceSuffix(id_mercado.ToString + '/produtos')
            .AddParam('id_categoria', id_categoria.ToString)
            .AddParam('busca', busca)
            .DataSetAdapter(TabProduto)
            .Accept('application/json')
            .BasicAuthentication(USER_NAME, PASSWORD)
            .Get;

    if (resp.StatusCode <> 200) then
        raise Exception.Create(resp.Content);
end;

//listar produtos id
procedure TDmMercado.ListarProdutoId(id_produto : integer);
var
  resp: IResponse;
begin
    //resposta
    resp := TRequest.New.BaseURL(BASE_URL)
            .Resource('produtos')
            .ResourceSuffix(id_produto.ToString)
            .DataSetAdapter(TabProdDetalhe)
            .Accept('application/json')
            .BasicAuthentication(USER_NAME, PASSWORD)
            .Get;

    if (resp.StatusCode <> 200) then
        raise Exception.Create(resp.Content);
end;

//Pedido no carrino EXISTE
function TDmMercado.ExistePedidoLocal(id_mercado: integer) : Boolean;
begin
  with QryMercado do
  begin
      Active := False;
      SQL.Clear;
      SQL.Add('SELECT * FROM TAB_CARRINHO WHERE ID_MERCADO <> :ID_MERCADO');
      ParamByName('ID_MERCADO').value := id_mercado;
      Active := true;

      Result := RecordCount > 0;
  end;

end;

//Limpar carrinho
procedure TDmMercado.LimparCarrinhoLocal;
begin
  with QryCarrinho do
  begin
      Active := False;
      SQL.Clear;
      SQL.Add('DELETE FROM TAB_CARRINHO');
      ExecSQL;

      Active := False;
      SQL.Clear;
      SQL.Add('DELETE FROM TAB_CARRINHO_ITEM');
      ExecSQL;
  end;
end;

//adicionar no carrinho local
procedure TDmMercado.AdicionarCarrinhoLocal(Id_mercado : Integer; Nome_mercado, Endereco_mercado : string; Taxa_entrega : Double);
begin
  with QryCarrinho do
  begin
      Active := False;
      SQL.Clear;
      SQL.Add('SELECT * FROM TAB_CARRINHO');
      Active := True;

      if RecordCount =0  then
      begin
        Active := False;
        SQL.Clear;
        SQL.Add('INSERT INTO TAB_CARRINHO(ID_MERCADO, NOME_MERCADO, ENDERECO_MERCADO, TAXA_ENTREGA)');
        SQL.Add('VALUES (:ID_MERCADO, :NOME_MERCADO, :ENDERECO_MERCADO, :TAXA_ENTREGA)');
        ParamByName('ID_MERCADO').Value :=  Id_mercado;
        ParamByName('NOME_MERCADO').Value := Nome_mercado;
        ParamByName('ENDERECO_MERCADO').Value := Endereco_mercado;
        ParamByName('TAXA_ENTREGA').Value := roundto(Taxa_entrega,  -2);
        ExecSQL;
      end;
  end;
end;

//listar carrinho local
procedure TDmMercado.ListarCarrinhoLocal;
begin
  with QryCarrinho do
  begin
      Active := False;
      SQL.Clear;
      SQL.Add('SELECT * FROM TAB_CARRINHO');
      Active := True;
  end;
end;

//adicionar item no carrinho local
procedure TDmMercado.AdicionarItemCarrinhoLocal(Id_produto: integer; url_foto, nome, unidade : string; qtd, valor_unitario : double);
begin
   with QryCarrinho do
  begin
        Active := False;
        SQL.Clear;
        SQL.Add('INSERT INTO TAB_CARRINHO_ITEM(ID_PRODUTO, URL_FOTO, NOME_PRODUTO, UNIDADE, QTD, VALOR_UNITARIO, VALOR_TOTAL)');
        SQL.Add('VALUES (:ID_PRODUTO, :URL_FOTO, :NOME_PRODUTO, :UNIDADE, :QTD, :VALOR_UNITARIO, :VALOR_TOTAL)');
        ParamByName('ID_PRODUTO').Value :=  Id_produto;
        ParamByName('URL_FOTO').Value := url_foto;
        ParamByName('NOME_PRODUTO').Value := nome;
        ParamByName('UNIDADE').Value := unidade;
        ParamByName('QTD').Value := qtd;
        ParamByName('VALOR_UNITARIO').Value := roundto(valor_unitario, -2);
        ParamByName('VALOR_TOTAL').Value := roundto(valor_unitario * qtd, -2);
        ExecSQL;
  end;

end;

procedure TDmMercado.ListarItemCarrinhoLocal;
begin
  with QryCarrinhoItens do
  begin
      Active := False;
      SQL.Clear;
      SQL.Add('SELECT * FROM TAB_CARRINHO_ITEM');
      Active := True;
  end;
end;

end.
