unit UnitPedidoDetalhe;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Layouts, FMX.ListBox, uLoading;

type
  TFrmPedidoDetalhe = class(TForm)
    lytEndereco: TLayout;
    lblEndereco: TLabel;
    lblEndereco1: TLabel;
    lytToolBar: TLayout;
    lblTitulo: TLabel;
    imgVoltar: TImage;
    rctngl: TRectangle;
    lytSubTotal: TLayout;
    lblSubTotal: TLabel;
    lblSubTotalValor: TLabel;
    lytTaxa: TLayout;
    lblTaxaValor: TLabel;
    lblTaxa: TLabel;
    lytTotal: TLayout;
    lblTotal: TLabel;
    lblTotalValor: TLabel;
    lblEndereco2: TLabel;
    lblEndereco11: TLabel;
    lbProdutos: TListBox;
    rctnglEndereco: TRectangle;
    procedure FormShow(Sender: TObject);
  private
    FId_pedido: integer;
    procedure AddProduto(id_produto: integer; descricao: string; qtd,
      valor_unit: double; foto: TStream);
    procedure CarregarPedido;
    procedure ThreadDadosTerminate(Sender: TObject);
    { Private declarations }
  public
    { Public declarations }
    property id_pedido: integer read FId_pedido write FId_pedido;
  end;

var
  FrmPedidoDetalhe: TFrmPedidoDetalhe;

implementation

uses
  Fram.ProdutoLista;

{$R *.fmx}

procedure TFrmPedidoDetalhe.AddProduto(id_produto: integer; descricao: string; qtd, valor_unit : double; foto : TStream);
var
  item : TListBoxItem;
  frame : TFrameProdutoLista;
begin
  item := TListBoxItem.Create(lbProdutos); //instancia novo item em branco
  item.Selectable := false; // não deixar cinza ao selecionar
  item.Text := ''; //texto do item vazio
  item.Height := 65;
  item.Tag := id_produto;

  //frame
  frame := TFrameProdutoLista.Create(item);
  //frame.imgFoto.bitmap :=
  frame.lblDescricao.text := descricao;
  frame.lblQtd.text := qtd.ToString + 'x' + FormatFloat('R$#,##0.00', valor_unit);
  frame.lblValor.text := FormatFloat('R$#,##0.00', qtd * valor_unit);

  item.AddObject(frame);

  //adicionando itens na lista de produtos
  lbProdutos.AddObject(item);
end;

//inserindo produtos
procedure TFrmPedidoDetalhe.CarregarPedido;
var
  t : TThread;
begin
  TLoading.Show(FrmPedidoDetalhe, '');

  t := TThread.CreateAnonymousThread(procedure
  begin
    DmUsuario.JsonPedido;

    //thread paralela para sicronizar
      TThread.Synchronize(TThread.CurrentThread, procedure
      begin
       //adicionando os pedidos
        AddPedidoLv(fieldbyname('id_pedido').asinteger,
                        fieldbyname('qtd_itens').asinteger,
                        fieldbyname('nome_estab').asstring,
                        FieldByName('endereco').AsString,
                        UTCtoDateBR(fieldbyname('dt_pedido').AsString),
                        fieldbyname('vl_total').asfloat);
      end);
  end);

  t.OnTerminate := ThreadDadosTerminate; //rotina de erro
  t.Start;
end;

{thread terminate dados}
procedure TFrmPedidoDetalhe.ThreadDadosTerminate(Sender: TObject);
begin
  TLoading.Hide;

  if Sender is TThread then
  begin
    if Assigned(TThread(Sender).FatalException) then
    begin
      ShowMessage(Exception(TThread(sender).FatalException).Message);
      Exit;
    end;
  end;
end;

procedure TFrmPedidoDetalhe.FormShow(Sender: TObject);
begin
  CarregarPedido;

end;

end.
