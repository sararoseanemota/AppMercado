unit UnitLogin;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.TabControl,
  FMX.StdCtrls, FMX.Edit, FMX.Controls.Presentation, FMX.Layouts, FMX.Objects, uLoading;

type
  TFrmLogin = class(TForm)
    TabControl: TTabControl;
    TabILogin: TTabItem;
    TabConta1: TTabItem;
    TabConta2: TTabItem;
    imgLogo: TImage;
    lytLogin: TLayout;
    lblAcessar: TLabel;
    edtEmail: TEdit;
    edtSenha: TEdit;
    btnLogin: TButton;
    lblCrieAgora: TLabel;
    imgConta1Login: TImage;
    lytConta1: TLayout;
    lblCriarNovaConta: TLabel;
    btnProximo: TButton;
    lblLogin: TLabel;
    lblPasso1: TLabel;
    imgConta2Logo: TImage;
    lytConta2: TLayout;
    lblCriarConta2: TLabel;
    btnCriarConta: TButton;
    lblPasso2: TLabel;
    lblConta2: TLabel;
    ltyConta2: TLayout;
    rctLoginEmail: TRectangle;
    rctLoginSenha: TRectangle;
    StyleBook1: TStyleBook;
    rctConta1Nome: TRectangle;
    edtNome: TEdit;
    rctConta1Senha: TRectangle;
    edtContaSenha: TEdit;
    rctConta1Email: TRectangle;
    edtContaEmail: TEdit;
    rctCep: TRectangle;
    edtCep: TEdit;
    rctEndereco: TRectangle;
    edtEndereco: TEdit;
    rctBairro: TRectangle;
    edtBairro: TEdit;
    rctUf: TRectangle;
    edtUf: TEdit;
    rctCidade: TRectangle;
    edtCidade: TEdit;
    btnVoltar: TImage;
    lytVoltar: TLayout;
    procedure btnLoginClick(Sender: TObject);
    procedure lblCrieAgoraClick(Sender: TObject);
    procedure lblLoginClick(Sender: TObject);
    procedure btnProximoClick(Sender: TObject);
    procedure lblConta2Click(Sender: TObject);
    procedure btnCriarContaClick(Sender: TObject);
  private
    procedure ThreadLoginTerminate(Sender: TObject);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FrmLogin: TFrmLogin;

implementation

{$R *.fmx}

uses
  DataModule.Usuario, UnitPrincipal;

//voltar na tela de cadastro e login
procedure TFrmLogin.btnProximoClick(Sender: TObject);
begin
  TabControl.GotoVisibleTab(2);
end;

procedure TFrmLogin.lblConta2Click(Sender: TObject);
begin
  TabControl.GotoVisibleTab(0);
end;

procedure TFrmLogin.lblCrieAgoraClick(Sender: TObject);
begin
  tabcontrol.GotoVisibleTab(1);
end;

procedure TFrmLogin.lblLoginClick(Sender: TObject);
begin
  TabControl.GotoVisibleTab(0);
end;

//thread
procedure TFrmLogin.ThreadLoginTerminate(Sender: TObject);
begin
  TLoading.Hide; //parar de exibir a bolinha executando

  if Sender is TThread then
  begin
    if Assigned(TThread(Sender).FatalException) then
    begin
        ShowMessage(Exception(TThread(sender).FatalException).Message);
        Exit;
    end;
  end;

  //Abrir o form Principal...
  if NOT Assigned(FrmPrincipal) then
      Application.CreateForm(TFrmPrincipal, FrmPrincipal); //classe e variavel

  Application.MainForm := FrmPrincipal; //definir form principal
  FrmPrincipal.Show; //abrir o form
  FrmLogin.Close; // fechar o form login
end;

//criar conta
procedure TFrmLogin.btnCriarContaClick(Sender: TObject);
var
  t : TThread;
begin
  TLoading.Show(FrmLogin, '');

  t := TThread.CreateAnonymousThread(procedure
  begin
    Sleep(1500); //teste do loading
    DmUsuario.CriarConta(edtNome.Text, edtContaEmail.Text,
                          edtContaSenha.Text, edtEndereco.Text,
                          edtBairro.Text, edtCidade.Text, edtUf.Text, edtCep.Text);

    //salvar dados no banco do aparelho
    if DmUsuario.TabUsuario.RecordCount > 0 then
    begin

    end;

  end);
  t.OnTerminate := ThreadLoginTerminate; //rotina de erro
  t.Start;
end;

//login
procedure TFrmLogin.btnLoginClick(Sender: TObject);
var
  t : TThread;
begin
  TLoading.Show(FrmLogin, '');

  t := TThread.CreateAnonymousThread(procedure
  begin
    Sleep(1500); //teste do loading
    DmUsuario.Login(edtEmail.Text, edtSenha.Text);

    //salvar dados no banco do aparelho
    with DmUsuario.TabUsuario do
    begin
      if RecordCount > 0 then
      begin
        DmUsuario.SalvarUsuarioLocal (FieldByName('email').AsString,
                                     FieldByName('nome').AsString,
                                     FieldByName('endereco').AsString,
                                     FieldByName('bairro').AsString,
                                     FieldByName('cidade').AsString,
                                     FieldByName('uf').AsString,
                                     FieldByName('cep').AsString);
      end;

    end;

  end);

  t.OnTerminate := ThreadLoginTerminate; //rotina de erro
  t.Start;
end;

end.
